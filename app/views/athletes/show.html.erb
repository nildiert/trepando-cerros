<div class="container mx-auto p-4 space-y-6" data-controller="analysis">
  <h1 class="text-2xl font-bold">Panel de Carrera</h1>

  <div class="grid gap-6 md:grid-cols-2">
    <div class="bg-white/80 backdrop-blur-md rounded-xl p-6 shadow-lg">
      <h2 class="text-xl font-semibold mb-2">Atleta en Strava</h2>
      <% if @athlete.present? %>
        <div class="flex items-center space-x-4">
          <% if @athlete.respond_to?(:profile) && @athlete.profile.present? %>
            <%= image_tag @athlete.profile, alt: 'Foto de perfil', class: 'w-16 h-16 rounded-full' %>
          <% end %>
          <div>
            <p class="text-gray-800 font-semibold"><%= @athlete.firstname %> <%= @athlete.lastname %></p>
            <% if @athlete.respond_to?(:bio) && @athlete.bio.present? %>
              <p class="text-gray-600 text-sm"><%= @athlete.bio %></p>
            <% end %>
          </div>
        </div>
      <% else %>
        <p class="text-gray-600">No se pudo cargar la información de Strava.</p>
      <% end %>
    </div>

    <% if @athlete.present? %>
      <div class="bg-white/80 backdrop-blur-md rounded-xl p-6 shadow-lg">
        <% unless @estimated_time %>
          <h2 data-analysis-target="heading" class="text-xl font-semibold mb-2">Cargar Archivo</h2>
        <% end %>
        <% if @estimated_time %>
          <p class="text-lg font-medium mb-2">Tiempo estimado:</p>
          <p class="text-4xl font-bold mb-1"><%= @estimated_time %></p>
          <p class="text-sm text-gray-600 mb-4">
            <%= @total_distance %> km &bull; <%= @total_elevation %> m+
          </p>
        <% else %>
          <%= form_with url: athlete_path(@athlete.id), method: :post, data: { action: 'submit->analysis#submit', turbo: false, analysis_target: 'form' }, local: true, multipart: true do %>
            <div data-analysis-target="dropzone"
                 data-action="dragover->analysis#dragOver dragleave->analysis#dragLeave drop->analysis#drop click->analysis#openFile"
                 class="mb-4 flex flex-col items-center justify-center border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:border-blue-500">
              <svg class="w-12 h-12 text-gray-500 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1M12 12V4m0 0L8 8m4-4l4 4" />
              </svg>
              <p class="text-gray-600">Arrastra tu archivo GPX o haz clic para seleccionarlo</p>
              <%= file_field_tag :gpx_file, class: 'hidden', data: { analysis_target: 'file', action: 'change->analysis#autoSubmit' } %>
              <%= hidden_field_tag :start_time, @start_time, data: { analysis_target: 'timeField' } %>
            </div>
            <div data-analysis-target="timeCard" class="hidden mb-4 flex flex-col items-center justify-center p-6 text-center">
              <p class="mb-2 font-medium">Selecciona tu hora de inicio</p>
              <input type="time" data-analysis-target="timeInput" class="px-2 py-1">
              <div class="flex justify-end space-x-2 mt-4">
                <button type="button" data-action="analysis#cancelTime" class="px-3 py-2 bg-gray-200 rounded hover:bg-gray-300">Cancelar</button>
                <button type="button" data-action="analysis#confirmTime" class="px-3 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Aceptar</button>
              </div>
            </div>
          <% end %>
          <div data-analysis-target="loader" class="hidden flex items-center space-x-2 mt-4">
            <div class="animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-blue-400"></div>
            <span>Analizando...</span>
          </div>
          <div class="w-full bg-gray-200 rounded h-2 mt-2 overflow-hidden">
            <div data-analysis-target="bar" class="bg-blue-500 h-full w-0 transition-all duration-500"></div>
          </div>
          <div data-analysis-target="messages" class="text-sm mt-2 space-y-1"></div>

        <% end %>
      </div>
      <% end %>
    </div>

  <% if @estimated_time %>
    <div class="grid gap-6 grid-cols-1">
      <div class="bg-white/80 backdrop-blur-md rounded-xl p-6 shadow-lg w-full" data-controller="tabs">
        <nav class="border-b border-gray-200 mb-4">
          <ul class="flex space-x-4">
            <li><button class="px-3 py-2 border-b-2 font-medium text-sm" data-tabs-target="tab" data-action="tabs#change">Resumen</button></li>
            <li><button class="px-3 py-2 border-b-2 font-medium text-sm" data-tabs-target="tab" data-action="tabs#change">Gráfica</button></li>
            <li><button class="px-3 py-2 border-b-2 font-medium text-sm" data-tabs-target="tab" data-action="tabs#change">Progreso</button></li>
            <li><button class="px-3 py-2 border-b-2 font-medium text-sm" data-tabs-target="tab" data-action="tabs#change">Controles</button></li>
            <li><button class="px-3 py-2 border-b-2 font-medium text-sm" data-tabs-target="tab" data-action="tabs#change">Nutrición</button></li>
         </ul>
        </nav>
        <div data-tabs-target="panel">
          <p class="text-lg font-medium mb-2">Tiempo estimado:</p>
          <p class="text-4xl font-bold mb-1"><%= @estimated_time %></p>
          <p class="text-sm text-gray-600 mb-4">
            <%= @total_distance %> km &bull; <%= @total_elevation %> m+
          </p>
        </div>
        <div data-tabs-target="panel" class="hidden">
          <canvas id="profileChart" class="w-full h-56"></canvas>
        </div>
        <div data-tabs-target="panel" class="hidden">
          <h2 class="text-xl font-semibold mb-2">Progreso por hora</h2>
          <div class="flex items-center space-x-4 mb-4">
            <label for="startTime" class="font-medium">Hora de inicio:</label>
            <input type="time" id="startTime" value="<%= @start_time %>" class="border rounded px-2 py-1">
          </div>
          <table class="w-full text-left mb-4">
            <thead>
              <tr>
                <th class="px-2 py-1">Hora</th>
                <th class="px-2 py-1">Dist. acum. (km)</th>
                <th class="px-2 py-1">Km tramo</th>
                <th class="px-2 py-1">Desnivel +</th>
                <th class="px-2 py-1">Desnivel -</th>
                <th class="px-2 py-1">Hora del día</th>
              </tr>
            </thead>
          <tbody id="hourTimes"></tbody>
        </table>
        </div>
        <div data-tabs-target="panel" class="hidden" data-controller="checkpoints" data-checkpoints-km-seconds-value='<%= raw(@km_seconds.to_json) %>'>
          <form data-action="submit->checkpoints#add" class="mb-4 flex space-x-2">
            <input type="text" placeholder="Nombre" data-checkpoints-target="name" class="border rounded px-2 py-1 flex-grow">
            <input type="number" step="0.1" placeholder="Km" data-checkpoints-target="km" class="border rounded px-2 py-1 w-24">
            <button type="submit" class="bg-blue-500 text-white px-3 py-1 rounded">Agregar</button>
          </form>
          <table class="w-full text-left">
            <thead>
              <tr>
                <th class="px-2 py-1">Nombre</th>
                <th class="px-2 py-1">Km</th>
                <th class="px-2 py-1">Rango aprox.</th>
              </tr>
            </thead>
            <tbody data-checkpoints-target="list"></tbody>
          </table>
        </div>
        <div data-tabs-target="panel" class="hidden" data-controller="nutrition">
          <h2 class="text-xl font-semibold mb-2">Plan nutricional</h2>
          <ul class="list-disc pl-6 mb-4 text-sm">
            <li>Drink Mix 320 (80 g CH / 500 ml) | 7 sachets</li>
            <li>Drink Mix 160 (40 g CH / 500 ml) | 8 sachets</li>
            <li>Gel 160 (40 g CH) | 17 gels</li>
            <li>Gel 100 CAF 100 (25 g CH + 100 mg cafeína) | 3 gels</li>
            <li>Gel 100 (25 g CH) | 11 gels</li>
          </ul>
          <table class="w-full text-left">
            <thead>
              <tr>
                <th class="px-2 py-1">Hora</th>
                <th class="px-2 py-1">Drink Mix</th>
                <th class="px-2 py-1">Gel</th>
                <th class="px-2 py-1">CH</th>
                <th class="px-2 py-1">Hora del día</th>
              </tr>
            </thead>
            <tbody data-nutrition-target="list"></tbody>
          </table>
        </div>
      </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const data = {
          labels: <%= raw(@profile_data[:distance_km].to_json) %>,
          datasets: [{
            label: 'Elevaci\u00f3n (m)',
            data: <%= raw(@profile_data[:elevation_m].to_json) %>,
            fill: false,
            borderColor: 'rgb(59,130,246)',
            backgroundColor: 'rgba(59,130,246,0.3)',
            pointRadius: 0,
            tension: 0.4,
            borderWidth: 2
          }]
        };
        const kmSeconds = <%= raw(@km_seconds.to_json) %>;

        function timeForDistance(d) {
          if (kmSeconds.length === 0) return 0;
          for (let i = 0; i < kmSeconds.length; i++) {
            const km = kmSeconds[i][0];
            const sec = kmSeconds[i][1];
            if (d <= km) {
              if (i === 0) return sec * (d / km);
              const kmA = kmSeconds[i - 1][0];
              const secA = kmSeconds[i - 1][1];
              const ratio = (d - kmA) / (km - kmA);
              return secA + ratio * (sec - secA);
            }
          }
          return kmSeconds[kmSeconds.length - 1][1];
        }

        const RANGE_SEC = 30 * 60; // +/- 30 minutes

        function dayTimeString(seconds) {
          const startInput = document.getElementById('startTime');
          if (!startInput.value) return formatTime(seconds);
          const [h, m] = startInput.value.split(':').map(Number);
          const base = new Date();
          base.setHours(h, m, 0, 0);
          const t = new Date(base.getTime() + seconds * 1000);
          return `${String(t.getHours()).padStart(2,'0')}:${String(t.getMinutes()).padStart(2,'0')}`;
        }

        function timeRangeString(seconds) {
          const start = Math.max(0, seconds - RANGE_SEC);
          const finish = seconds + RANGE_SEC;
          return `${dayTimeString(start)} - ${dayTimeString(finish)}`;
        }

        function formatTime(seconds) {
          const h = Math.floor(seconds / 3600);
          const m = Math.floor((seconds % 3600) / 60);
          return `${String(h).padStart(2,'0')}:${String(m).padStart(2,'0')}`;
        }

        new Chart(document.getElementById('profileChart'), {
          type: 'line',
          data,
          options: {
            plugins: {
              legend: { display: false },
              tooltip: {
                callbacks: {
                  afterLabel: ctx => {
                    const t = timeForDistance(ctx.parsed.x);
                    return 'Paso aprox: ' + timeRangeString(t);
                  }
                }
              }
            },
            scales: {
              x: { title: { display: true, text: 'Distancia (km)' } },
              y: { title: { display: true, text: 'Elevaci\u00f3n (m)' } }
            },
            animation: { duration: 1000 }
          }
        });

        const progress = <%= raw(@hourly_progress.to_json) %>;
        const input = document.getElementById('startTime');
        const list = document.getElementById('hourTimes');
        function renderTimes() {
          list.innerHTML = '';
          if (!input.value) return;
          const [h, m] = input.value.split(':').map(Number);
          const base = new Date();
          base.setHours(h, m, 0, 0);
          progress.forEach(([hr, cum, seg, pos, neg]) => {
            const t = new Date(base.getTime() + hr * 3600 * 1000);
            const hh = String(t.getHours()).padStart(2, '0');
            const mm = String(t.getMinutes()).padStart(2, '0');
            const tr = document.createElement('tr');
            tr.innerHTML = `<td class='px-2 py-1'>${hr}</td>` +
              `<td class='px-2 py-1'>${cum}</td>` +
              `<td class='px-2 py-1'>${seg}</td>` +
              `<td class='px-2 py-1'>${pos}</td>` +
              `<td class='px-2 py-1'>${neg}</td>` +
              `<td class='px-2 py-1'>${hh}:${mm}</td>`;
            list.appendChild(tr);
          });
        }
        input.addEventListener('change', renderTimes);
        renderTimes();
      });
    </script>
  <% elsif flash[:alert] %>
    <p class="text-red-600"><%= flash[:alert] %></p>
  <% end %>
</div>
